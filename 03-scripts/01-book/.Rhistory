) +
labs(size = "% Participants"
, fill = "Model"
, alpha = "% Participants"
, title = "Loneliness") +
# guides(size = "none"
#        , fill = guide_legend(title.position="top", title.hjust = .5, label.hjust = 0)
#        , alpha = "none"
#        , shape = "none")
guides(size = guide_legend(title.position="top", title.hjust = .5, order = 1, label.hjust = 0.1)
, fill = guide_legend(title.position="top", title.hjust = .5, label.hjust = 0)
, alpha = guide_legend(title.position="top", title.hjust = 0.5, order = 1, label.hjust = 0.1)
, shape = guide_legend(title.position="top", title.hjust = 0.5, order = 1, label.hjust = 0.1))
legend <- cowplot::get_legend(p2)
p2 <- p2 + theme(legend.position = "none")
# guides(size = guide_legend(title.position="top", title.hjust = 0.5, order = 1)
#          , fill = "none"
#          , alpha = guide_legend(title.position="top", title.hjust = 0.5, order = 1)
#          , shape = guide_legend(title.position="top", title.hjust = 0.5, order = 1))
p3 <- var_freq %>%
select(new_name, Variable2) %>%
distinct() %>%
mutate(new_name = factor(new_name, ftrs$new_name),
names = paste0(Variable2, ": ", new_name)) %>%
arrange(Variable2) %>%
mutate(names = factor(names, .$names)) %>%
ggplot(aes(x = 1, y = 1:66)) +
geom_text(aes(label = rev(names)), hjust = 0, size = 3) +
scale_x_continuous(limits = c(.9999, 1.1))+
theme_classic() +
theme(axis.line = element_blank()
, axis.text = element_blank()
, axis.ticks = element_blank()
, axis.title = element_blank())
# p3 <- plot_grid(p3, legend, nrow = 2, rel_heights = c(.95, .05)) +
#   theme(plot.margin = margin(.1,.5,.5,-1, unit = "cm"))
p <- plot_grid(p1, p2, nrow = 2, rel_heights = c(.53, .47))
p <- plot_grid(p, p3, nrow = 1, rel_widths = c(.65, .35))
p <- plot_grid(p, legend, nrow = 2, rel_heights = c(.95, .05)); p
ggsave(p, file = sprintf("%s/05-results/05-figures/fig-4-combined_top5.pdf", res_path), height = 12 , width = 9)
ggsave(p, file = sprintf("%s/05-results/05-figures/fig-4-combined_top5.png", res_path), height = 12 , width = 9)
px_coef_tab_fun <- function(d, SID, outcome){
o <- mapvalues(outcome, outcomes$trait, outcomes$long_name, warn_missing = F)
mchar <- d %>% select(model, group, accuracy) %>% distinct() %>%
mutate(model = mapvalues(model, c("glmnet", "biscwit", "rf"), c("Elastic Net", "BISCWIT", "Random Forest")),
tmp = sprintf("%s: best model was %s with accuracy %.2f", model, group, accuracy))
note <- paste(mchar$tmp, collapse = "; "); note <- paste0(note, ".")
d2 <- d %>%
select(-group, -accuracy) %>%
pivot_wider(names_from = "model"
, values_from = "coef"
, values_fn = mean) %>%
mutate_at(vars(-Variable), ~ifelse(abs(.) > .01, sprintf("%.2f", .), ifelse(. == 0, "0", ifelse(. > -.01 & . < 0, sprintf("> -.01", .), sprintf("< .01", .))))) %>%
full_join(ftrs %>% select(group, Variable = old_name, new_name)) %>%
filter(!is.na(group)) %>%
select(-Variable) %>%
mutate(new_name = factor(new_name, ftrs$new_name)
, group = str_to_title(group)) %>%
mutate_at(vars(glmnet, biscwit, rf), ~ifelse(is.na(.), 0, .)) %>%
arrange(new_name)
rs <- d2 %>% group_by(group) %>% tally() %>%
mutate(end = cumsum(n), start = lag(end) + 1, start = ifelse(is.na(start), 1, start))
tab <- d2 %>%
select(new_name, glmnet, biscwit, rf) %>%
kable(.
, "html"
, escape = F
, col.names = c("Variable", "Elastic Net", "BISCWIT", "Random Forest")
, align = c("r", rep("c", 3))
, cap = sprintf("%s Model Coefficients for Participant %s", o, SID)) %>%
kable_styling(full_width = F) %>%
add_footnote(note, label = NULL)
for (i in 1:nrow(rs)){
tab <- tab %>% kableExtra::group_rows(rs$group[i], rs$start[i], rs$end[i])
}
save_kable(tab, file = sprintf("%s/05-results/04-tables/05-participant-coef/%s_%s.html"
, res_path, SID, outcome))
return(tab)
}
px_coef_tab_fun <- function(d, SID, outcome){
o <- mapvalues(outcome, outcomes$trait, outcomes$long_name, warn_missing = F)
mchar <- d %>% select(model, group, accuracy) %>% distinct() %>%
mutate(model = mapvalues(model, c("glmnet", "biscwit", "rf"), c("Elastic Net", "BISCWIT", "Random Forest")),
tmp = sprintf("%s: best model was %s with accuracy %.2f", model, group, accuracy))
note <- paste(mchar$tmp, collapse = "; "); note <- paste0(note, ".")
d2 <- d %>%
select(-group, -accuracy) %>%
pivot_wider(names_from = "model"
, values_from = "coef"
, values_fn = mean) %>%
mutate_at(vars(-Variable), ~ifelse(abs(.) > .01, sprintf("%.2f", .), ifelse(. == 0, "0", ifelse(. > -.01 & . < 0, sprintf("> -.01", .), sprintf("< .01", .))))) %>%
full_join(ftrs %>% select(group, Variable = old_name, new_name)) %>%
filter(!is.na(group)) %>%
select(-Variable) %>%
mutate(new_name = factor(new_name, ftrs$new_name)
, group = str_to_title(group)) %>%
mutate_at(vars(glmnet, biscwit, rf), ~ifelse(is.na(.), 0, .)) %>%
arrange(new_name)
rs <- d2 %>% group_by(group) %>% tally() %>%
mutate(end = cumsum(n), start = lag(end) + 1, start = ifelse(is.na(start), 1, start))
tab <- d2 %>%
select(new_name, glmnet, biscwit, rf) %>%
kable(.
, "html"
, escape = F
, col.names = c("Variable", "Elastic Net", "BISCWIT", "Random Forest")
, align = c("r", rep("c", 3))
, cap = sprintf("%s Model Coefficients for Participant %s", o, SID)) %>%
kable_styling(full_width = F) %>%
add_footnote(note, label = NULL)
for (i in 1:nrow(rs)){
tab <- tab %>% kableExtra::group_rows(rs$group[i], rs$start[i], rs$end[i])
}
save_kable(tab, file = sprintf("%s/05-results/04-tables/05-participant-coef/%s_%s.html"
, res_path, SID, outcome))
return(tab)
}
px_coef <- param_res %>%
right_join(best_mods %>%
select(-.estimator, -.config) %>%
filter(.metric == "accuracy")
) %>%
filter(map_lgl(coefs, is.null) == F) %>%
mutate(coefs = map(coefs, ~(.) %>% data.frame() %>% rownames_to_column("Variable") %>% setNames(c("Variable", "coef")))) %>%
select(-params) %>%
unnest(coefs) %>%
mutate(Variable = str_remove_all(Variable, "_X1"),
Variable = str_remove_all(Variable, "_1"),
Variable = str_remove_all(Variable, "_2"),
Variable = str_replace_all(Variable, "[.]", "_"),
group = sprintf("%s, %s", str_to_title(group), str_to_title(time))) %>%
select(-set, -.metric, -time) %>%
rename(accuracy = .estimate) %>%
group_by(SID, outcome) %>%
nest() %>%
ungroup() %>%
mutate(tab = pmap(list(data, SID, outcome), possibly(px_coef_tab_fun, NA_real_))); px_coef
coef_plot_fun <- function(d, outcome, gr, SID, model){
o <- mapvalues(outcome, outcomes$trait, outcomes$long_name, warn_missing = F)
mod <- mapvalues(model, c("glmnet", "biscwit", "rf"), c("Elastic Net", "BISCWIT", "Random Forest"), warn_missing = F)
ttl <- sprintf("Best %s Model (%s) Predicting \n%s for Participant %s", mod, gr, o, SID)
d <- d %>% mutate(coef = abs(coef))
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 4
to_add <- data.frame(matrix(NA, empty_bar*nlevels(factor(d$category)), ncol(d)) )
colnames(to_add) <- colnames(d)
to_add$category <- rep(levels(factor(d$category)), each=empty_bar)
d <- rbind(d, to_add)
d <- d %>% arrange(category, desc(coef))
d$id <- seq(1, nrow(d))
breaks <- round(seq(0, max(d$coef, na.rm = T), length.out = 5),2)
rng <- c(-1*(breaks[5]-.01), breaks[5]+.01)
# Get the name and the y position of each label
label_data <- d
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
label_data <- label_data %>%
mutate(y = ifelse(is.na(coef) | coef < 0, 0, coef + rng[2]/20)
, lab = ifelse(!is.na(coef) & coef > 0, str_wrap(`short name`, 20), `short name`))
rng <- c(round(-1*max(label_data$y),2)-.01, round(max(label_data$y),2)+.01)
# prepare a data frame for base lines
base_data <- d %>%
group_by(category) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
breaks <- breaks[1:4]
# rng <- c(-1*breaks[4], breaks[4])
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# grid_data <- grid_data %>% crossing(breaks)
p <- d %>%
ggplot(aes(
x = as.factor(id)
, y = coef
, fill = category
)) +
geom_bar(aes(na.rm = F), stat="identity", alpha=0.5) +
scale_x_discrete(drop=FALSE) +
scale_fill_manual(
values = c("deepskyblue4", "seagreen3", "lightgoldenrod1")
, drop = F
) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data = grid_data
, aes(x = end, y = breaks[1], xend = start, yend = breaks[1])
, colour = "grey"
, alpha=1
, size=0.3
, inherit.aes = FALSE ) +
geom_segment(data = grid_data
, aes(x = end, y = breaks[2], xend = start, yend = breaks[2])
, colour = "grey"
, alpha=1
, size=0.3
, inherit.aes = FALSE ) +
geom_segment(data = grid_data
, aes(x = end, y = breaks[3], xend = start, yend = breaks[3])
, colour = "grey"
, alpha=1
, size=0.3
, inherit.aes = FALSE ) +
geom_segment(data = grid_data
, aes(x = end, y = breaks[4], xend = start, yend = breaks[4])
, colour = "grey"
, alpha=1
, size=0.3
, inherit.aes = FALSE ) +
#  # Add text showing the value of each 100/75/50/25 lines
annotate("text"
, x = rep(max(d$id),4)
, y = breaks
, label = paste0(breaks, "-")
, color="grey"
, size=3
, angle=0
, fontface="bold"
, hjust=1) +
ylim(rng[1], rng[2]) +
theme_minimal() +
theme(
# legend.position = "none",
legend.position = "bottom",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = .5, size = rel(1))
# plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
labs(fill = "Feature Category", title = ttl) +
guides(fill = guide_legend(title.position="top", title.hjust = .5, label.hjust = 0)) +
geom_text(data = label_data
, aes(x = id
, y = y#coef
, label = lab
, hjust = hjust)
, color="black"
, fontface="bold"
, lineheight = .6
, alpha=0.6
, size=2.5
, angle= label_data$angle
, inherit.aes = FALSE) +
# Add base line information
geom_segment(data = base_data
, aes(x = start
, y = rng[1]/20
, xend = end
, yend = rng[1]/20)
, colour = "black"
, alpha=0.8
, size=0.6
, inherit.aes = FALSE )
ggsave(p, filename = sprintf("%s/05-results/05-figures/02-participant-coef/%s/%s_%s.pdf"
, res_path, model, SID, outcome)
, width = 6, height = 8)
return(p)
}
coef_plot_fun <- function(d, outcome, gr, SID, model){
o <- mapvalues(outcome, outcomes$trait, outcomes$long_name, warn_missing = F)
mod <- mapvalues(model, c("glmnet", "biscwit", "rf"), c("Elastic Net", "BISCWIT", "Random Forest"), warn_missing = F)
ttl <- sprintf("Best %s Model (%s) Predicting \n%s for Participant %s", mod, gr, o, SID)
d <- d %>% mutate(coef = abs(coef))
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 4
to_add <- data.frame(matrix(NA, empty_bar*nlevels(factor(d$category)), ncol(d)) )
colnames(to_add) <- colnames(d)
to_add$category <- rep(levels(factor(d$category)), each=empty_bar)
d <- rbind(d, to_add)
d <- d %>% arrange(category, desc(coef))
d$id <- seq(1, nrow(d))
breaks <- round(seq(0, max(d$coef, na.rm = T), length.out = 5),2)
rng <- c(-1*(breaks[5]-.01), breaks[5]+.01)
# Get the name and the y position of each label
label_data <- d
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
label_data <- label_data %>%
mutate(y = ifelse(is.na(coef) | coef < 0, 0, coef + rng[2]/20)
, lab = ifelse(!is.na(coef) & coef > 0, str_wrap(`short name`, 20), `short name`))
rng <- c(round(-1*max(label_data$y),2)-.01, round(max(label_data$y),2)+.01)
# prepare a data frame for base lines
base_data <- d %>%
group_by(category) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
breaks <- breaks[1:4]
# rng <- c(-1*breaks[4], breaks[4])
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# grid_data <- grid_data %>% crossing(breaks)
p <- d %>%
ggplot(aes(
x = as.factor(id)
, y = coef
, fill = category
)) +
geom_bar(aes(na.rm = F), stat="identity", alpha=0.5) +
scale_x_discrete(drop=FALSE) +
scale_fill_manual(
values = c("deepskyblue4", "seagreen3", "lightgoldenrod1")
, drop = F
) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data = grid_data
, aes(x = end, y = breaks[1], xend = start, yend = breaks[1])
, colour = "grey"
, alpha=1
, size=0.3
, inherit.aes = FALSE ) +
geom_segment(data = grid_data
, aes(x = end, y = breaks[2], xend = start, yend = breaks[2])
, colour = "grey"
, alpha=1
, size=0.3
, inherit.aes = FALSE ) +
geom_segment(data = grid_data
, aes(x = end, y = breaks[3], xend = start, yend = breaks[3])
, colour = "grey"
, alpha=1
, size=0.3
, inherit.aes = FALSE ) +
geom_segment(data = grid_data
, aes(x = end, y = breaks[4], xend = start, yend = breaks[4])
, colour = "grey"
, alpha=1
, size=0.3
, inherit.aes = FALSE ) +
#  # Add text showing the value of each 100/75/50/25 lines
annotate("text"
, x = rep(max(d$id),4)
, y = breaks
, label = paste0(breaks, "-")
, color="grey"
, size=3
, angle=0
, fontface="bold"
, hjust=1) +
ylim(rng[1], rng[2]) +
theme_minimal() +
theme(
# legend.position = "none",
legend.position = "bottom",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = .5, size = rel(1))
# plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
labs(fill = "Feature Category", title = ttl) +
guides(fill = guide_legend(title.position="top", title.hjust = .5, label.hjust = 0)) +
geom_text(data = label_data
, aes(x = id
, y = y#coef
, label = lab
, hjust = hjust)
, color="black"
, fontface="bold"
, lineheight = .6
, alpha=0.6
, size=2.5
, angle= label_data$angle
, inherit.aes = FALSE) +
# Add base line information
geom_segment(data = base_data
, aes(x = start
, y = rng[1]/20
, xend = end
, yend = rng[1]/20)
, colour = "black"
, alpha=0.8
, size=0.6
, inherit.aes = FALSE )
ggsave(p, filename = sprintf("%s/05-results/05-figures/02-participant-coef/%s/%s_%s.pdf"
, res_path, model, SID, outcome)
, width = 6, height = 8)
ggsave(p, filename = sprintf("%s/05-results/05-figures/02-participant-coef/%s/png/%s_%s.png"
, res_path, model, SID, outcome)
, width = 6, height = 8)
return(p)
}
px_coef_fig <- param_res %>%
right_join(best_mods %>% filter(.metric == "accuracy") %>% select(model:time)) %>%
select(-params) %>%
filter(map_lgl(coefs, is.null) == F) %>%
mutate(coefs = map(coefs, ~(.) %>%
data.frame() %>%
rownames_to_column("Variable") %>%
setNames(c("Variable", "coef")))
) %>%
unnest(coefs) %>%
mutate(Variable = str_remove_all(Variable, "_X1"),
Variable = str_remove_all(Variable, "_1"),
Variable = str_remove_all(Variable, "_2"),
Variable = str_replace_all(Variable, "[.]", "_"),
group = sprintf("%s, %s", str_to_title(group), str_to_title(time))) %>%
select(-set, -time) %>%
group_by(model, SID, outcome, group, Variable) %>%
summarize(coef = mean(coef)) %>%
ungroup() %>%
group_by(model, outcome, SID, group) %>%
nest() %>%
ungroup() %>%
mutate(data = map(data, ~(.) %>%
full_join(ftrs %>%
select(category = group, Variable = old_name, `short name`)
) %>%
mutate(coef = ifelse(coef == 0, NA_real_, coef)
, category = factor(str_to_title(category)))),
p = pmap(list(data, outcome, group, SID, model)
, possibly(coef_plot_fun, NA_real_)))
procor_fun <- function(d){
m <- d %>%
select(-SID) %>%
mutate_all(~ifelse(is.na(.), 0, .)) %>%
as.matrix(); rownames(m) <- d$SID
r <- cor(t(m))
diag(r) <- NA
rd <- r %>% data.frame() %>%
rownames_to_column("SID1") %>%
pivot_longer(cols = -SID1
, names_to = "SID2"
, values_to = "r"
, values_drop_na = T) %>%
mutate(SID2 = str_remove_all(SID2, "X"))
r %>%
mutate(r = fisherz(r)) %>%
group_by(SID1) %>%
summarize_at(vars(r), lst(mean, min, max))
}
profile_sim <- param_res %>%
select(-params) %>%
right_join(best_mods %>% select(model:.metric)) %>%
filter(map_lgl(coefs, is.null) == F) %>%
mutate(coefs = map(coefs, ~(.) %>%
data.frame() %>%
rownames_to_column("Variable") %>%
setNames(c("Variable", "coef")))
) %>%
unnest(coefs) %>%
mutate(Variable = str_remove_all(Variable, "_X1"),
Variable = str_remove_all(Variable, "_1"),
Variable = str_remove_all(Variable, "_2"),
Variable = str_replace_all(Variable, "[.]", "_")) %>%
filter(Variable %in% ftrs$old_name) %>%
group_by(model, SID, outcome, .metric, Variable) %>%
summarize(coef = mean(coef)) %>%
ungroup()
profile_sim %>%
left_join(ftrs %>% select(group, Variable = old_name, new_name)) %>%
filter(model == "glmnet" & .metric == "accuracy" & outcome == "prcrst") %>%
mutate(coef = ifelse(coef == 0, NA, coef)
, coef = ifelse(coef > 5, 5, ifelse(coef < -5, -5, coef))
, group = str_to_title(group)
, new_name = factor(new_name, rev(ftrs$new_name))) %>%
drop_na() %>%
ggplot(aes(x = SID, y = new_name, color = coef)) +
scale_color_gradient2(low = "blue"
, mid = "white"
, high = "red"
# , limits = c(-5,5)
) +
geom_point() +
labs(x = "Participant ID", y = NULL, color = "Coefficient") +
facet_grid(group ~ ., space = "free", scale = "free") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, face = "bold")
, axis.text.y = element_text(face = "bold")
, legend.position = "bottom"
, strip.background = element_rect(fill = "black")
, strip.text = element_text(face = "bold", color = "white", size = rel(1.2)))
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
list.files("%s/05-results/04-tables/05-participant-coef", res_path)
list.files(sprintf("%s/05-results/04-tables/05-participant-coef", res_path))
list.files(sprintf("%s/05-results/04-tables/05-participant-coef", res_path))
tibble(file = list.files(sprintf("%s/05-results/04-tables/05-participant-coef", res_path)))
tibble(file = list.files(sprintf("%s/05-results/04-tables/05-participant-coef", res_path))) %>% separate(file, c("SID", "outcome"), sep = "_")
tibble(file = list.files(sprintf("%s/05-results/04-tables/05-participant-coef", res_path))) %>% separate(file, c("SID", "outcome"), sep = "_") %>% mutate(outcome = str_remove_all(outcome, ".html"))
px <- tibble(file = list.files(sprintf("%s/05-results/04-tables/05-participant-coef", res_path))) %>% separate(file, c("SID", "outcome"), sep = "_") %>% mutate(outcome = str_remove_all(outcome, ".html"))
save(px, file = "~/Downloads/sid.RData")
load("https://github.com/emoriebeck/behavior-prediction/blob/main/05-results/sid.RData?raw=true")
load(url("https://github.com/emoriebeck/behavior-prediction/blob/main/05-results/sid.RData?raw=true"))
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp()
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
runApp('Box/network/other projects/idio prediction/behavior-prediction')
setwd(sprintf("%s/03-scripts/01-book", res_path))
bookdown::render_book("index.Rmd")
