theme(
# legend.position = "none",
legend.position = "bottom",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = .5, size = rel(1))
# plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
labs(fill = "Feature Category", title = ttl) +
guides(fill = guide_legend(title.position="top", title.hjust = .5, label.hjust = 0)) +
geom_text(data = label_data
, aes(x = id
, y = y#coef
, label = lab
, hjust = hjust)
, color="black"
, fontface="bold"
, lineheight = .6
, alpha=0.6
, size=2.5
, angle= label_data$angle
, inherit.aes = FALSE) +
geom_text(data = label_data
, aes(x = id
, y = coef - rng[2]/20
, label = neg)
, color="black"
, hjust = .5
, fontface="bold"
, lineheight = .6
, size=2
, angle= label_data$angle
, inherit.aes = FALSE) +
# Add base line information
geom_segment(data = base_data
, aes(x = start
, y = rng[1]/20
, xend = end
, yend = rng[1]/20)
, colour = "black"
, alpha=0.8
, size=0.6
, inherit.aes = FALSE)
ggsave(p, filename = sprintf("%s/05-results/05-figures/02-participant-coef/%s/%s_%s.pdf"
, local_path, model, SID, outcome)
, width = 6, height = 8)
ggsave(p, filename = sprintf("%s/05-results/05-figures/02-participant-coef/%s/png/%s_%s.png"
, local_path, model, SID, outcome)
, width = 6, height = 8)
return(p)
}
px_coef_fig <- param_res %>%
right_join(best_mods %>% filter(.metric == "accuracy") %>% select(model:time)) %>%
select(-params) %>%
filter(map_lgl(coefs, is.null) == F) %>%
mutate(coefs = map(coefs, ~(.) %>%
data.frame() %>%
rownames_to_column("Variable") %>%
setNames(c("Variable", "coef")))
) %>%
unnest(coefs) %>%
mutate(Variable = str_remove_all(Variable, "_X1"),
Variable = str_remove_all(Variable, "_1"),
Variable = str_remove_all(Variable, "_2"),
Variable = str_replace_all(Variable, "[.]", "_"),
group = sprintf("%s, %s", str_to_title(group), str_to_title(time))) %>%
select(-set, -time) %>%
group_by(model, SID, outcome, group, Variable) %>%
summarize(coef = mean(coef)) %>%
ungroup() %>%
group_by(model, outcome, SID, group) %>%
nest() %>%
ungroup() %>%
mutate(data = map(data, ~(.) %>%
full_join(ftrs %>%
select(category = group, Variable = old_name, `short name`)
) %>%
mutate(coef = ifelse(coef == 0, NA_real_, coef)
, category = factor(str_to_title(category)))),
p = pmap(list(data, outcome, group, SID, model)
, possibly(coef_plot_fun, NA_real_)))
procor_fun <- function(d){
m <- d %>%
select(-SID) %>%
mutate_all(~ifelse(is.na(.), 0, .)) %>%
as.matrix(); rownames(m) <- d$SID
r <- cor(t(m))
diag(r) <- NA
rd <- r %>% data.frame() %>%
rownames_to_column("SID1") %>%
pivot_longer(cols = -SID1
, names_to = "SID2"
, values_to = "r"
, values_drop_na = T) %>%
mutate(SID2 = str_remove_all(SID2, "X"))
r %>%
mutate(r = fisherz(r)) %>%
group_by(SID1) %>%
summarize_at(vars(r), lst(mean, min, max))
}
profile_sim <- param_res %>%
select(-params) %>%
right_join(best_mods %>% select(model:.metric)) %>%
filter(map_lgl(coefs, is.null) == F) %>%
mutate(coefs = map(coefs, ~(.) %>%
data.frame() %>%
rownames_to_column("Variable") %>%
setNames(c("Variable", "coef")))
) %>%
unnest(coefs) %>%
mutate(Variable = str_remove_all(Variable, "_X1"),
Variable = str_remove_all(Variable, "_1"),
Variable = str_remove_all(Variable, "_2"),
Variable = str_replace_all(Variable, "[.]", "_")) %>%
filter(Variable %in% ftrs$old_name) %>%
group_by(model, SID, outcome, .metric, Variable) %>%
summarize(coef = mean(coef)) %>%
ungroup()
profile_plot_fun <- function(d, model, metric, outcome){
o <- mapvalues(outcome, outcomes$trait, outcomes$long_name, warn_missing = F)
mod <- mapvalues(model, c("glmnet", "biscwit", "rf"), c("Elastic Net", "BISCWIT", "Random Forest"), warn_missing = F)
m <- mapvalues(metric, c("accuracy", "roc_auc"), c("Accuracy", "AUC"), warn_missing = F)
ttl <- sprintf("%s Predicting Future %s Using Best %s Models", mod, o, m)
min <- if(model == "glmnet") 5 else if (model == "biscwit") 1 else max(abs(d$coef), na.rm = T)
p <- d %>%
mutate(coef = ifelse(coef == 0, NA, coef)
, coef = ifelse(coef > min, min, ifelse(coef < -1*min, -1*min, coef))
, group = str_to_title(group)
, new_name = factor(new_name, rev(ftrs$new_name))) %>%
drop_na() %>%
ggplot(aes(x = SID, y = new_name, color = coef)) +
scale_color_gradient2(low = "blue"
, mid = "white"
, high = "red"
# , limits = c(-5,5)
) +
geom_point() +
labs(x = "Participant ID", y = NULL, color = "Coefficient"
, title = ttl) +
facet_grid(group ~ ., space = "free", scale = "free") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, face = "bold")
, axis.text.y = element_text(face = "bold")
, legend.position = "bottom"
, strip.background = element_rect(fill = "black")
, strip.text = element_text(face = "bold", color = "white", size = rel(1.2)))
ggsave(p, file = sprintf("%s/05-results/05-figures/03-px-profiles/%s_%s_%s.pdf"
, local_path, outcome, model, metric)
, width = 10, height = 10)
return(p)
}
profile_sim_plots <- profile_sim %>%
left_join(ftrs %>% select(group, Variable = old_name, new_name)) %>%
group_by(model, .metric, outcome) %>%
nest() %>%
ungroup() %>%
mutate(p = pmap(list(data, model, .metric, outcome), profile_plot_fun))
profile_sim_plots
(profile_sim_plots %>% filter(.metric == "accuracy" & model == "glmnet" & outcome == "prcrst"))$p[[1]]
bookdown::render_book("index.Rmd")
setwd(sprintf("%s/03-scripts/01-book", local_path))
bookdown::render_book("index.Rmd")
# wave 1 esm
load(url(sprintf("%s/04-data/01-raw-data/clean_data_w1_2020-06-08.RData", res_path)))
load
load
load
https://github.com/emoriebeck/behavior-prediction/raw/main/04-data/01-raw-data/clean_data_w1_2020-06-08.RData
load(url(sprintf("%s/04-data/01-raw-data/esm_cleaned_combined_2021-04-07.RData", res_path)))
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
load(url(sprintf("%s/04-data/01-raw-data/cleaned_combined_2020-05-06.RData", res_path)))
dem <- baseline %>%
select(SID:race) %>%
mutate(age = year(ymd_hms(StartDate)) - as.numeric(YOB),
StartDate = as.Date(ymd_hms(StartDate)),
race = factor(race, 0:3, c("White", "Black", "Asian", "Other"))) %>%
select(-YOB)
dem %>%
summarize(n = length(unique(SID)),
gender = sprintf("%i (%.2f%%)",sum(gender == "Female"), sum(gender == "Female")/n()*100),
age = sprintf("%.2f (%.2f)", mean(age, na.rm = T), sd(age, na.rm = T)),
white = sprintf("%i (%.2f%%)"
, sum(race == "White", na.rm = T)
, sum(race == "White", na.rm = T)/n()*100),
black = sprintf("%i (%.2f%%)"
, sum(race == "Black", na.rm = T)
, sum(race == "Black", na.rm = T)/n()*100),
asian = sprintf("%i (%.2f%%)"
, sum(race == "Asian", na.rm = T)
, sum(race == "Asian", na.rm = T)/n()*100),
other = sprintf("%i (%.2f%%)"
, sum(race == "Other", na.rm = T)
, sum(race == "Other", na.rm = T)/n()*100),
StartDate = sprintf("%s (%s - %s)", median(StartDate),
min(StartDate), max(StartDate)))
dem %>%
kable(., "html"
, col.names = c("ID", "Start Date", "Gender", "Race/Ethnicity", "Age")
, align = rep("c", 5)
, caption = "<strong>Table S1</strong><br><em>Descriptive Statistics of Participants at Baseline<em>") %>%
kable_styling(full_width = F) %>%
scroll_box(height = "900px")
load(url(sprintf("%s/04-data/01-raw-data/cleaned_combined_2020-05-06.RData", res_path)))
dem <- baseline %>%
select(SID:race) %>%
mutate(age = year(ymd_hms(StartDate)) - as.numeric(YOB),
StartDate = as.Date(ymd_hms(StartDate)),
race = factor(race, 0:3, c("White", "Black", "Asian", "Other"))) %>%
select(-YOB)
prelim_dem <- all_features %>%
filter(category %in% c("Affect", "BFI-2", "sit", "SI-8")) %>%
group_by(SID, Full_Date, trait, facet, category) %>%
summarize(value = mean(value, na.rm = T)) %>%
ungroup() %>%
pivot_wider(names_from = c("category", "trait", "facet")
, values_from = value) %>%
filter(complete.cases(.))
prelim_dem %>%
group_by(SID) %>%
tally() %>%
ungroup() %>%
left_join(dem) %>%
summarize(N = length(unique(SID)),
n = sprintf("%.2f (%.2f; %i-%i", mean(n), sd(n), min(n), max(n)),
gender = sprintf("%i (%.2f%%)",sum(gender == "Female", na.rm = T), sum(gender == "Female", na.rm = T)/n()*100),
age = sprintf("%.2f (%.2f)", mean(age, na.rm = T), sd(age, na.rm = T)),
white = sprintf("%i (%.2f%%)"
, sum(race == "White", na.rm = T)
, sum(race == "White", na.rm = T)/n()*100),
black = sprintf("%i (%.2f%%)"
, sum(race == "Black", na.rm = T)
, sum(race == "Black", na.rm = T)/n()*100),
asian = sprintf("%i (%.2f%%)"
, sum(race == "Asian", na.rm = T)
, sum(race == "Asian", na.rm = T)/n()*100),
other = sprintf("%i (%.2f%%)"
, sum(race == "Other", na.rm = T)
, sum(race == "Other", na.rm = T)/n()*100),
StartDate = sprintf("%s (%s - %s)", median(StartDate),
min(StartDate), max(StartDate)))
final_dem <- prelim_dem %>%
group_by(SID) %>%
filter(n() >= 40) %>%
tally() %>%
ungroup() %>%
left_join(dem)
unique(ldply(str_split(list.files(sprintf("%s/05-results/01-glmnet/01-tuning-models", res_path)), pattern = "_"), function(x) x[1]))$V1
final_dem %>%
filter(SID %in% unique(ldply(str_split(list.files(sprintf("%s/05-results/01-glmnet/01-tuning-models", res_path)), pattern = "_"), function(x) x[1]))$V1) %>%
summarize(N = length(unique(SID)),
n = sprintf("%.2f (%.2f; %i-%i", mean(n), sd(n), min(n), max(n)),
gender = sprintf("%i (%.2f%%)",sum(gender == "Female", na.rm = T), sum(gender == "Female", na.rm = T)/n()*100),
age = sprintf("%.2f (%.2f)", mean(age, na.rm = T), sd(age, na.rm = T)),
white = sprintf("%i (%.2f%%)"
, sum(race == "White", na.rm = T)
, sum(race == "White", na.rm = T)/n()*100),
black = sprintf("%i (%.2f%%)"
, sum(race == "Black", na.rm = T)
, sum(race == "Black", na.rm = T)/n()*100),
asian = sprintf("%i (%.2f%%)"
, sum(race == "Asian", na.rm = T)
, sum(race == "Asian", na.rm = T)/n()*100),
other = sprintf("%i (%.2f%%)"
, sum(race == "Other", na.rm = T)
, sum(race == "Other", na.rm = T)/n()*100),
StartDate = sprintf("%s (%s - %s)", median(StartDate),
min(StartDate), max(StartDate)))
final_dem
final_dem %>%
filter(SID %in% unique(ldply(str_split(list.files(sprintf("%s/05-results/01-glmnet/01-tuning-models", local_path)), pattern = "_"), function(x) x[1]))$V1) %>%
summarize(N = length(unique(SID)),
n = sprintf("%.2f (%.2f; %i-%i", mean(n), sd(n), min(n), max(n)),
gender = sprintf("%i (%.2f%%)",sum(gender == "Female", na.rm = T), sum(gender == "Female", na.rm = T)/n()*100),
age = sprintf("%.2f (%.2f)", mean(age, na.rm = T), sd(age, na.rm = T)),
white = sprintf("%i (%.2f%%)"
, sum(race == "White", na.rm = T)
, sum(race == "White", na.rm = T)/n()*100),
black = sprintf("%i (%.2f%%)"
, sum(race == "Black", na.rm = T)
, sum(race == "Black", na.rm = T)/n()*100),
asian = sprintf("%i (%.2f%%)"
, sum(race == "Asian", na.rm = T)
, sum(race == "Asian", na.rm = T)/n()*100),
other = sprintf("%i (%.2f%%)"
, sum(race == "Other", na.rm = T)
, sum(race == "Other", na.rm = T)/n()*100),
StartDate = sprintf("%s (%s - %s)", median(StartDate),
min(StartDate), max(StartDate)))
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
loadRData <- function(fileName, type, model){
#loads an RData file, and returns it
path <- sprintf("%s/05-results/%s/06-final-model-performance/%s", local_path, model, fileName)
load(path)
get(ls()[grepl(type, ls())])
}
sum_res <- tibble(
loadRData <- function(fileName, type, model){
#loads an RData file, and returns it
path <- sprintf("%s/05-results/%s/06-final-model-performance/%s", local_path, model, fileName)
load(path)
get(ls()[grepl(type, ls())])
}
sum_res <- tibble(
model = c("01-glmnet", "02-biscwit", "03-rf")
) %>%
mutate(file = map(model, ~sprintf("%s/05-results/%s/06-final-model-performance", local_path, .) %>%
list.files())) %>%
unnest(file) %>%
mutate(data = map2(file, model, ~loadRData(.x, "final_metrics", .y))) %>%
separate(file, c("SID", "outcome", "group", "set", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")
, model = str_remove_all(model, "[0-9 -]")); sum_res
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F)
options(knitr.kable.NA = '')
library(knitr)              # creating tables
library(kableExtra)         # formatting and exporting tables
library(rio)                # importing html
library(readxl)             # read excel codebooks and documentation
library(psych)              # biscuit / biscwit
library(glmnet)             # elastic net regression
library(glmnetUtils)        # extension of basic elastic net with CV
library(caret)              # train and test for random forest
library(vip)                # variable importance
library(Amelia)             # multiple imputation (of time series)
library(lubridate)          # date wrangling
library(gtable)             # ggplot friendly tables
library(grid)               # ggplot friendly table rendering
library(gridExtra)          # more helpful ggplot friendly table updates
library(plyr)               # data wranging
library(tidyverse)          # data wrangling
library(ggdist)             # distributional plots
library(ggridges)           # more distributional plots
library(cowplot)            # flexibly arrange multiple ggplot objects
library(tidymodels)         # tidy model workflow and selection
library(modeltime)          # tidy models for time series
library(furrr)              # mapping many models in parallel
res_path <- "https://github.com/emoriebeck/behavior-prediction/raw/main"
local_path <- "~/Box/network/other projects/idio prediction"
# list of all codebook sheets
ipcs_codebook <- import(file = sprintf("%s/01-codebooks/codebook.xlsx", res_path), which = 2) %>%
as_tibble()
ipcs_codebook
outcomes <- ipcs_codebook %>% filter(category == "outcome") %>% select(trait, long_name)
ftrs <- import(file = sprintf("%s/01-codebooks/codebook.xlsx", res_path), which = 3) %>%
as_tibble()
ipcs_codebook %>% filter(category == "BFI-2")
ipcs_codebook %>% filter(category == "Affect")
ipcs_codebook %>% filter(category == "sit")
ipcs_codebook %>% filter(category == "S8-I")
load(url(sprintf("%s/04-data/01-raw-data/cleaned_combined_2020-05-06.RData", res_path)))
dem <- baseline %>%
select(SID:race) %>%
mutate(age = year(ymd_hms(StartDate)) - as.numeric(YOB),
StartDate = as.Date(ymd_hms(StartDate)),
race = factor(race, 0:3, c("White", "Black", "Asian", "Other"))) %>%
select(-YOB)
dem %>%
summarize(n = length(unique(SID)),
gender = sprintf("%i (%.2f%%)",sum(gender == "Female"), sum(gender == "Female")/n()*100),
age = sprintf("%.2f (%.2f)", mean(age, na.rm = T), sd(age, na.rm = T)),
white = sprintf("%i (%.2f%%)"
, sum(race == "White", na.rm = T)
, sum(race == "White", na.rm = T)/n()*100),
black = sprintf("%i (%.2f%%)"
, sum(race == "Black", na.rm = T)
, sum(race == "Black", na.rm = T)/n()*100),
asian = sprintf("%i (%.2f%%)"
, sum(race == "Asian", na.rm = T)
, sum(race == "Asian", na.rm = T)/n()*100),
other = sprintf("%i (%.2f%%)"
, sum(race == "Other", na.rm = T)
, sum(race == "Other", na.rm = T)/n()*100),
StartDate = sprintf("%s (%s - %s)", median(StartDate),
min(StartDate), max(StartDate)))
dem %>%
kable(., "html"
, col.names = c("ID", "Start Date", "Gender", "Race/Ethnicity", "Age")
, align = rep("c", 5)
, caption = "<strong>Table S1</strong><br><em>Descriptive Statistics of Participants at Baseline<em>") %>%
kable_styling(full_width = F) %>%
scroll_box(height = "900px")
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
loadRData <- function(fileName, type, model){
#loads an RData file, and returns it
path <- sprintf("%s/05-results/%s/06-final-model-performance/%s", local_path, model, fileName)
load(path)
get(ls()[grepl(type, ls())])
}
sum_res <- tibble(
model = c("01-glmnet", "02-biscwit", "03-rf")
) %>%
mutate(file = map(model, ~sprintf("%s/05-results/%s/06-final-model-performance", local_path, .) %>%
list.files())) %>%
unnest(file) %>%
mutate(data = map2(file, model, ~loadRData(.x, "final_metrics", .y))) %>%
separate(file, c("SID", "outcome", "group", "set", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")
, model = str_remove_all(model, "[0-9 -]"))
save(sum_res, file = sprintf("%s/05-results/final-model-performance.RData", local_path))
loadRData <- function(fileName, type, model){
#loads an RData file, and returns it
path <- sprintf("%s/05-results/%s/07-final-model-param/%s", res_path, model, fileName)
load(path)
get(ls()[grepl(type, ls())])
}
param_res <- tibble(
model = c("01-glmnet", "02-biscwit", "03-rf")
) %>%
mutate(file = map(model, ~sprintf("%s/05-results/%s/07-final-model-param", res_path, .) %>%
list.files())) %>%
unnest(file) %>%
mutate(params = map2(file, model, ~loadRData(.x, "best", .y))
, coefs = map2(file, model, ~loadRData(.x, "coef", .y))) %>%
separate(file, c("SID", "outcome", "group", "set", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")
, model = str_remove_all(model, "[0-9 -]"))
save(param_res, file = sprintf("%s/05-results/final-model-param.RData", local_path))
bookdown::render_book("index.Rmd")
px_tun_par_tab_fun <- function(d, model, outcome){
if(model == "glmnet"){
cn <- c("ID","Group", "Penalty", "Mixture", "# Features", "Accuracy")
al <- c(rep("r", 2), rep("c", 4))
tab <- d %>%
mutate(group = str_to_title(paste(group, time, sep = ", "))) %>%
select(SID, group, penalty, mixture, nvars, .estimate) %>%
mutate(penalty = ifelse(penalty < .01, sprintf("%.1e", penalty), sprintf("%.2f", penalty))
, .estimate = sprintf("%.2f", .estimate)
, mixture = ifelse(mixture == 0, "0", sprintf("%.2f", mixture)))
} else if(model == "rf"){
cn <- c("ID","Group", "# Features Sampled", "Min N for Split", "# Features", "Accuracy")
al <- c(rep("r", 2), rep("c", 4))
tab <- d %>%
mutate(group = str_to_title(paste(group, time, sep = ", "))) %>%
select(SID, group, mtry, min_n, nvars, .estimate) %>%
mutate(.estimate = sprintf("%.2f", .estimate))
} else {
cn <- c("ID","Group", "# Items", "# Features", "Accuracy")
al <- c(rep("r", 2), rep("c", 3))
tab <- d %>%
mutate(group = str_to_title(paste(group, time, sep = ", "))) %>%
select(SID, group, nitem, nvars, .estimate) %>%
mutate(.estimate = sprintf("%.2f", .estimate))
}
o <- mapvalues(outcome, outcomes$trait, outcomes$long_name, warn_missing = F)
m <- mapvalues(model, c("glmnet", "rf", "biscwit"), c("Elastic Net", "Random Forest", "BISCWIT"))
cap <- sprintf("<strong>Table X</strong><br><em>Tuning Parameters, Final Number of Non-Zero Features, and Classifications Accuracy for Each Participants' Best Model of %s Using %s", o, m)
tab <- tab %>%
kable(.
, "html"
, escape = "F"
, col.names = cn
, align = al
, cap = cap
) %>%
kable_styling(full_width = F)
save_kable(tab, file = sprintf("%s/05-results/04-tables/03-px-tuning-params/%s_%s.html", local_path, outcome, model))
return(tab)
}
tuning_param <- param_res %>%
right_join(best_mods %>% select(-.estimator, -.config)) %>%
select(-coefs) %>%
group_by(outcome, model) %>%
nest() %>%
ungroup() %>%
mutate(data = map(data, ~(.) %>% unnest(params) %>% filter(.metric == "accuracy")),
tab = pmap(list(data, model, outcome), px_tun_par_tab_fun))
param_res
loadRData <- function(fileName, type, model){
#loads an RData file, and returns it
path <- sprintf("%s/05-results/%s/07-final-model-param/%s", res_path, model, fileName)
load(path)
get(ls()[grepl(type, ls())])
}
param_res <- tibble(
model = c("01-glmnet", "02-biscwit", "03-rf")
) %>%
mutate(file = map(model, ~sprintf("%s/05-results/%s/07-final-model-param", res_path, .) %>%
list.files())) %>%
unnest(file) %>%
mutate(params = map2(file, model, ~loadRData(.x, "best", .y))
, coefs = map2(file, model, ~loadRData(.x, "coef", .y))) %>%
separate(file, c("SID", "outcome", "group", "set", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")
, model = str_remove_all(model, "[0-9 -]"))
loadRData <- function(fileName, type, model){
#loads an RData file, and returns it
path <- sprintf("%s/05-results/%s/07-final-model-param/%s", local_path, model, fileName)
load(path)
get(ls()[grepl(type, ls())])
}
param_res <- tibble(
model = c("01-glmnet", "02-biscwit", "03-rf")
) %>%
mutate(file = map(model, ~sprintf("%s/05-results/%s/07-final-model-param", local_path, .) %>%
list.files())) %>%
unnest(file) %>%
mutate(params = map2(file, model, ~loadRData(.x, "best", .y))
, coefs = map2(file, model, ~loadRData(.x, "coef", .y))) %>%
separate(file, c("SID", "outcome", "group", "set", "time"), sep = "_") %>%
mutate(time = str_remove_all(time, ".RData")
, model = str_remove_all(model, "[0-9 -]"))
save(param_res, file = sprintf("%s/05-results/final-model-param.RData", local_path))
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
